<?php

/*
 * This file is part of the a Mlankatech (PTY) LTD Project.
 *
 * (c) Mfana Ronald Conco <ronald.conco@mlankatech.co.za>
 *
 * For the full copyright and license information, please view the LICENSE.
 *
 * Created At: 2016/09/27
 */
namespace AppBundle\Repository;

use AppBundle\Common\ContentType;
use AppBundle\Entity\Artist;
use AppBundle\Entity\RecordLabel;
use AppBundle\Entity\Song;
use AppBundle\Entity\Advert;
use AppBundle\Entity\Slogan;
use Doctrine\ORM\EntityRepository;

/**
 * RadioStationStreamRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class RadioStationStreamRepository extends EntityRepository
{
    /**
     * Get dashboard top songs
     * @param $range
     * @return array
     */
    public function getDashboardTopSongs($range)
    {
        $connection = $this->getEntityManager()->getConnection();
        $sql = null;
        if($range == 'this-week'){
            $sql = "SELECT title,artist,song_id,count(*) as played, WEEK(played_at,3) as this_week,label,album FROM RADIO_STATION_STREAM WHERE WEEK(created_at,3) = WEEK(now(),3) AND content_type_id = 1 GROUP BY title ORDER BY count(*) DESC LIMIT 10";
        }else if($range == 'last-week'){
            $sql = "SELECT title,artist,song_id,count(*) as played, WEEK(played_at,3) as this_week,label,album FROM RADIO_STATION_STREAM WHERE WEEK(created_at,3) = WEEK(DATE_ADD(now(), INTERVAL -1 WEEK),3) AND content_type_id = 1  GROUP BY title ORDER BY count(*) DESC LIMIT 10";
        }else if($range == 'current-month'){
            $sql = "SELECT title,artist,song_id,count(*) as played, MONTH(played_at) as this_month,label,album FROM RADIO_STATION_STREAM WHERE MONTH(created_at) = MONTH(now()) AND content_type_id = 1 GROUP BY title ORDER BY count(*) DESC LIMIT 10";
        }else if($range == 'last-month'){
            $sql = "SELECT title,artist,song_id,count(*) as played, MONTH(played_at) as this_month,label,album FROM RADIO_STATION_STREAM WHERE MONTH(created_at) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND content_type_id = 1 GROUP BY title ORDER BY count(*) DESC LIMIT 10";
        }else if($range == 'historical'){
            $sql = "SELECT title,artist,song_id,count(*) as played ,label,album FROM RADIO_STATION_STREAM WHERE content_type_id = 1 GROUP BY title ORDER BY count(*) DESC LIMIT 10";
        }

        $stmt = $connection->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get this week top songs
     *
     * @param $id
     * @return array
     */
    public function getWeekTopSongsByRadioStation($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT title,artist,song_id,count(*) as played, WEEK(played_at,3) as this_week,radio_station_id,label,album FROM RADIO_STATION_STREAM WHERE WEEK(created_at,3) = WEEK(now(),3) AND radio_station_id= ? AND content_type_id = ? GROUP BY title ORDER BY count(*) DESC LIMIT 10";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->bindValue(2,1);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get overall top artist
     *
     * @param $range
     * @return array
     */
    public function getDashboardTopArtists($range)
    {
        $connection = $this->getEntityManager()->getConnection();

        if($range == 'this-week'){
            $sql = "SELECT title,artist,count(*) as played, WEEK(played_at,3) as this_week,label,album FROM RADIO_STATION_STREAM WHERE WEEK(created_at,3) = WEEK(now(),3) AND content_type_id = 1 GROUP BY artist ORDER BY count(*) DESC LIMIT 10";
        }else if($range == 'last-week'){
            $sql = "SELECT title,artist,count(*) as played, WEEK(played_at,3) as this_week,label,album FROM RADIO_STATION_STREAM WHERE WEEK(created_at,3) = WEEK(DATE_ADD(now(), INTERVAL -1 WEEK),3) AND content_type_id = 1 GROUP BY artist ORDER BY count(*) DESC LIMIT 10";
        }else if($range == 'current-month'){
            $sql = "SELECT title,artist,count(*) as played, MONTH(played_at) as this_month,label,album FROM RADIO_STATION_STREAM WHERE MONTH(created_at) = MONTH(now()) AND content_type_id = 1 GROUP BY artist ORDER BY count(*) DESC LIMIT 10";
        }else if($range == 'last-month'){
            $sql = "SELECT title,artist,count(*) as played, MONTH(played_at) as this_month,label,album FROM RADIO_STATION_STREAM WHERE MONTH(created_at) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND content_type_id = 1 GROUP BY artist ORDER BY count(*) DESC LIMIT 10";
        }else if($range == 'historical'){
            $sql = "SELECT title,artist,count(*) as played, MONTH(played_at) as this_month,label,album FROM RADIO_STATION_STREAM WHERE content_type_id = 1 GROUP BY artist ORDER BY count(*) DESC LIMIT 10";
        }

        $stmt = $connection->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get this week top artist
     *
     * @param $id
     * @return array
     */
    public function getWeekTopArtistsByRadioStation($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT title,artist,count(*) as played, WEEK(played_at,3) as this_week,radio_station_id,label,album FROM RADIO_STATION_STREAM WHERE WEEK(created_at,3) = WEEK(now(),3) AND radio_station_id= ? AND content_type_id = ? GROUP BY artist ORDER BY count(*) DESC LIMIT 10";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->bindValue(2,1);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get Week song to radio plays
     *
     * @param $id
     * @return array
     */
    public function getWeekSongTopRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, WEEK(rss.played_at,3) as this_week, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND WEEK(rss.created_at,3) = WEEK(now(),3) AND song_id= ? GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get last Week song to radio plays
     *
     * @param $id
     * @return array
     */
    public function getLastWeekSongTopRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, WEEK(rss.played_at,3) - 1 as this_week, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND WEEK(rss.created_at,3) = WEEK(DATE_ADD(now(), INTERVAL -1 WEEK),3) AND song_id= ? GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get Artist Week Top Songs
     *
     * @param $artistId
     * @return array
     */
    public function getArtistWeekTopSongsPlays($artistId)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, WEEK(rss.played_at,3) as this_week, rss.title as name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND WEEK(rss.created_at,3) = WEEK(now(),3) AND artist_id = ? GROUP BY title ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$artistId);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get Artist Last Week Top Songs
     *
     * @param $artistId
     * @return array
     */
    public function getArtistLastWeekTopSongsPlays($artistId)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, WEEK(rss.played_at,3) - 1 as this_week, rss.title as name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND WEEK(rss.created_at,3) = WEEK(DATE_ADD(now(), INTERVAL -1 WEEK),3) AND artist_id = ? GROUP BY title ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$artistId);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get current month song to radio plays
     *
     * @param $id
     * @return array
     */
    public function getCurrentMonthSongTopRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, MONTH(rss.played_at) as this_month, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND song_id= ? AND MONTH(rss.created_at) = MONTH(now())  GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get current month artist top songs
     *
     * @param $artistId
     * @return array
     */
    public function getCurrentMonthArtistTopSongPlays($artistId)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, MONTH(rss.played_at) as this_month, rss.title as name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND rss.artist_id = ? AND MONTH(rss.created_at) = MONTH(now())  GROUP BY rss.title ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$artistId);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get last month song to radio plays
     *
     * @param $id
     * @return array
     */
    public function getLastMonthSongTopRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, MONTH(rss.played_at) as this_month, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND song_id= ? AND MONTH(rss.created_at) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)  GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get last month song to radio plays
     *
     * @param $id
     * @return array
     */
    public function getHistoricalSongRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND song_id= ?  GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }


    /**
     * Get Artist last months songs plays
     *
     * @param $artistId
     * @return array
     */
    public function getLastMonthArtistTopSongsPlays($artistId)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, MONTH(rss.played_at) as this_month, rss.title as name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND rss.artist_id = ? AND MONTH(rss.created_at) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)  GROUP BY rss.title ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$artistId);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get Artist last months songs plays
     *
     * @param $artistId
     * @return array
     */
    public function getHistoricalArtistTopSongsPlays($artistId)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, rss.title as name FROM RADIO_STATION_STREAM as rss WHERE rss.artist_id = ? GROUP BY rss.title ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$artistId);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Update stream with song ID, Artist ID, Record label ID
     *
     * @param Song $song
     * @return int
     */
    public function updateSongDetailsBySong(Song $song)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "UPDATE RADIO_STATION_STREAM SET song_id = ?, artist_id = ?, record_label_id = ?  WHERE isrc = ? ";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$song->getId());
        $stmt->bindValue(2,$song->getArtist()->getId());
        $stmt->bindValue(3,$song->getRecordLabel()->getId());
        $stmt->bindValue(4,$song->getIsrc());
        $stmt->execute();
        return $stmt->rowCount();
    }

    /**
     * Update stream with Advert code
     *
     * @param Advert $advert
     * @return int
     */
    public function updateAdvertDetailsByAdvert(Advert $advert)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "UPDATE RADIO_STATION_STREAM SET advertising_organization_id = ? , advert_id = ? WHERE audio_file_id = ? ";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$advert->getAdvertisingOrganization()->getId());
        $stmt->bindValue(2,$advert->getId());
        $stmt->bindValue(3,$advert->getCode());
        $stmt->execute();
        return $stmt->rowCount();
    }

    /**
     * Update stream with Slogan code
     *
     * @param Slogan $slogan
     * @return int
     */
    public function updateAdvertDetailsBySlogan(Slogan $slogan)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "UPDATE RADIO_STATION_STREAM SET slogan_id = ? WHERE audio_file_id = ? ";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$slogan->getId());
        $stmt->bindValue(2,$slogan->getCode());
        $stmt->execute();
        return $stmt->rowCount();
    }

    /**
     * @param RecordLabel $recordLabel
     * @return int
     */
    public function updateContentLocalityByVerifiedRecordLabel(RecordLabel $recordLabel)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "UPDATE RADIO_STATION_STREAM SET record_label_id = ?, is_local = ?, is_african = ?  WHERE label = ? ";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$recordLabel->getId());
        $stmt->bindValue(2,$recordLabel->getIsLocal());
        $stmt->bindValue(3,$recordLabel->getIsAfrican());
        $stmt->bindValue(4,$recordLabel->getHiddenName());
        $stmt->execute();
        return $stmt->rowCount();
    }


    /**
     * @param RecordLabel $recordLabel
     * @return int
     */
    public function updateContentLocalityByVerifiedArtist(Artist $artist)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "UPDATE RADIO_STATION_STREAM SET is_local = ?, is_african = ?  WHERE artist_id = ? ";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$artist->getIsLocal());
        $stmt->bindValue(2,$artist->getIsAfrican());
        $stmt->bindValue(3,$artist->getId());
        $stmt->execute();
        return $stmt->rowCount();
    }

    /**
     * Get streams without artist Id
     * @return mixed
     */
    public function getStreamsWithoutArtistId()
    {
        $qb = $this->createQueryBuilder('stream')
            ->where('stream.artistObject is NULL')
            ->andWhere('stream.contentType = :contentType')
            ->setParameter('contentType',ContentType::SONG)
            ->setMaxResults(100);
        return $qb->getQuery()->execute();
    }

    /**
     * Get advert week radio plays
     *
     * @param $id
     * @return array
     */
    public function getWeekAdvertRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, WEEK(rss.played_at,3) as this_week, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND WEEK(rss.created_at,3) = WEEK(now(),3) AND advert_id= ? GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get advert last week radio plays
     *
     * @param $id
     * @return array
     */
    public function getLastWeekAdvertRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, WEEK(rss.played_at,3) - 1 as this_week, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND WEEK(rss.created_at,3) = WEEK(DATE_ADD(now(), INTERVAL -1 WEEK),3) AND advert_id= ? GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get current month advert to radio plays
     *
     * @param $id
     * @return array
     */
    public function getCurrentMonthAdvertRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, MONTH(rss.played_at) as this_month, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND advert_id= ? AND MONTH(rss.created_at) = MONTH(now())  GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get last month advert to radio plays
     *
     * @param $id
     * @return array
     */
    public function getLastMonthAdvertRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, MONTH(rss.played_at) as this_month, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND advert_id= ? AND MONTH(rss.created_at) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)  GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Get last month advert to radio plays
     *
     * @param $id
     * @return array
     */
    public function getHistoricalAdvertRadioStationPlays($id)
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = "SELECT count(*) as played, rs.name FROM RADIO_STATION_STREAM as rss, RADIO_STATION as rs WHERE rs.id = rss.radio_station_id AND advert_id= ?  GROUP BY radio_station_id ORDER BY count(*)";
        $stmt = $connection->prepare($sql);
        $stmt->bindValue(1,$id);
        $stmt->execute();
        return $stmt->fetchAll();
    }

}
